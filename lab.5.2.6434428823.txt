การค้นหาเส้นทางของ Stack จะไปทางเดียวเรื่อยๆ ซึ่งไม่เหมาะสมกับการหาเส้นทาง ต่างจาก Queue ที่แพร่กระจายเส้นทางที่มากกว่า เนื่องจาก Stack จะรับตำแหน่งใหม่แล้วจะ pop ออกมาแล้ว push เส้นทางใหม่ นั่นหมายความว่า Stack จะคำนวณหาเส้นทางใหม่ก่อนเส้นทางเก่าและหากเส้นทางใหม่ไม่สามารถไปต่อได้ก็จะ pop เส้นทางเก่ามาใช้อยู่ทำให้มีกรณีที่หาเส้นทางที่ไม่ใช่สั้นที่สุด(อ้อม) ซึ่งต่างจาก Queue ที่รับตำแหน่งใหม่แล้วจะไปอยู่ท้ายสุดของ Queue ตำแหน่งที่ dequeue ออกมาจะเป็นเส้นทางเก่า นั่นหมายความว่า Queue จะคำนวณเส้นทางเก่าก่อนเส้นทางใหม่แล้วค่อยๆ หาเส้นทางใหม่ไปเรื่อยๆ ซึ่งจะได้เส้นทางที่สั้นที่สุด รวมถึง expand ที่จะเพิ่มตำแหน่ง ล่าง, บน, ขวา, ซ้าย ตามลำดับก็ส่งผลให้ Stack จะคำนวณเส้นทางที่เพิ่มมาล่าสุดก่อน จะทำให้หาเส้นทางทางด้านขวาก่อนทางด้านล่าง ซึ่งกรณีที่เส้นทางอยู่ด้านขวา Stack ก็จะหาเส้นทางได้สั้นที่สุด(นั่นก็คือกรณีที่ใช้ในคลาส Lee นี้) แต่หากกรณีที่เส้นทางอยู่ด้านล่าง Stack ก็จะหาเส้นทางขวาก่อนเรื่อยๆ แล้วค่อยๆ ลงไปด้านล่าง ซึ่งเส้นทางก็จะอ้อมแล้วจะไม่ใช้เส้นทางที่สั้นที่สุด